<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0"
         DefaultTargets="Run"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <!-- 
        Certain properties and items in this settings file allow replacement of the following templates:
        ${VersionMajor}          - The major version number
        ${VersionMinor}          - The minor version number
        ${VersionPatch}          - The patch version number
        ${VersionBuild}          - The build number of the version
        ${VersionSemantic}       - The semantic version, e.g. 1.2.3
        ${VersionSemanticFull}   - The full semantic version, e.g. 1.2.3+001
        
        ${Configuration}         - The configuration, e.g. Release
        ${Platform}              - The platform name, e.g. Any CPU
        ${PlatformWithoutSpaces} - The platform name without spaces in it, e.g. AnyCPU
        
        ${VcsRevision}           - The current VCS revision 'number'
        ${VcsBranch}             - The name of the current VCS branch
        
        ${ReleaseNotesShort}     - The contents of the short release notes
        ${ReleaseNotesFull}      - The contents of the full release notes
        
        ${Now}                   - The current date and time
        ${Date}                  - The current date
        ${DayOfMonth}            - The current day of the month
        ${Month}                 - The current month
        ${Year}                  - The current year
        
        ${ProductName}           - The name of the product
        ${Company}               - The name of the company
        ${StartingYear}          - The year the current product was created / released.
        
        ${DirBin}                - The full path to the directory that contains the binaries
        ${DirDeploy}             - The full path to the directory that contains the artifacts
        ${DirLogs}               - The full path to the directory that contain the build logs
        ${DirSrc}                - The full path to the directory that contains the source files
        ${DirTemp}               - The full path to the directory that contains the temporary build files
    -->
    <!-- Overrides for the project specific properties -->
    <PropertyGroup>
        <!-- 
            The name of the product. This is used for:
            * CCM
            * SourceMonitor
            * Deployment directory naming
        -->
        <ProductName Condition=" '$(ProductName)' == '' ">BuildTester</ProductName>
        
        <!-- 
            The first year the product was available / created. This is used for:
            * Copyrights 
        -->
        <ProductStartingYear Condition=" '$(ProductStartingYear)' == '' ">2014</ProductStartingYear>
        
        <!-- 
            The name of the company. This is used for:
            * Copyrights
        -->
        <CompanyName Condition=" '$(CompanyName)' == '' ">BuildTester</CompanyName>
    </PropertyGroup>
    
    <!-- Overrides for the VCS specific properties -->
    <PropertyGroup>        
        <!-- The user name of the user who owns the repository on GitHub -->
        <!-- <GitHubUserName Condition=" '$(GitHubUserName)' == '' "></GitHubUserName> -->
        
        <!-- The repository that contains the source code for the current product -->
        <GitHubRepositoryName Condition=" '$(GitHubRepositoryName)' == '' ">$(GitHubUserName)\BuildTester</GitHubRepositoryName>
        
        <!-- Repository information -->
        <GitRemoteRepository Condition=" '$(GitRemoteRepository)' == '' ">https://%GitHubToken%:@github.com/$(GitHubUserName)/BuildTester.git</GitRemoteRepository>
    </PropertyGroup>
    
    
    
    
    
    <!--
        *************************************
        *                                   *
        *     BUILD SETTINGS                *
        *                                   *
        *************************************
    -->
    
    <!-- Overrides for the global properties -->
    <PropertyGroup>
        <!--<ShouldClean Condition=" '$(ShouldClean)' == ''">true</ShouldClean>-->
        
        <!-- Indicates that the execution of the build script runs through the steps but does not actually execute them -->
        <!-- <ShouldExecute Condition=" '$(ShouldExecute)' == '' ">true</ShouldExecute> -->
    </PropertyGroup>
    
    <!-- Overrides for the build configuration -->
    <PropertyGroup>
        <!-- The build configuration (debug / release / ...) that will be used to run all the unit tests and the static verification on -->
        <TestConfiguration Condition=" '$(TestConfiguration)' == '' ">release</TestConfiguration>
        
        <!-- The build configuration (debug / release / ..) that will be used for packaging of the binaries -->
        <ProductionConfiguration Condition=" '$(ProductionConfiguration)' == '' ">deploy</ProductionConfiguration>

        <!-- The platform for which the binaries will be build -->
        <!-- 
        <Platform Condition=" '$(Platform)' == '' ">Any CPU</Platform> 
        <PlatformWithoutSpaces>$(Platform.Replace(" ",""))</PlatformWithoutSpaces>
        -->
    </PropertyGroup>
    
    
    <!-- 
        **** DIRECTORIES ****
    -->
    <PropertyGroup>
        <!-- NOTE: The 'DirWorkspace' property is always set to the top-level directory of the workspace / repository -->
        
        <!-- The directory that will contain all the files generated during the build process -->
        <!-- <DirBuild Condition=" '$(DirBuild)' == '' ">$(DirWorkspace)\build</DirBuild> -->
        
        <!-- 
            The directory that will contain all the binaries generated during the build process. 
            Note that there may be configuration and platform specific sub-directories.
        -->
        <!-- <DirBuildBin Condition=" '$(DirBuildBin)' == '' ">$(DirBuild)\bin</DirBuild> -->
        
        <!-- 
            The directory where the current binaries are placed after being generated. 
            Note that $(Platform) and $(Configuration) do not have to be defined in this settings file. They may be provided
            externally as long as they are provided before the settings file is loaded!
        -->
        <!-- <DirBuildBinPlatformConfig Condition=" '$(DirBuildBinPlatformConfig)' == '' ">$([System.IO.Path]::GetFullPath('$(DirBuildBin)\$(PlatformWithoutSpaces)\$(Configuration)\'))</DirBuildBinPlatformConfig> -->
        
        <!-- The directory that will contain all the generated artifacts during the build process -->
        <!-- <DirBuildDeploy Condition=" '$(DirBuildDeploy)' == '' ">$(DirBuild)\deploy</DirBuildDeploy> -->
        
        <!-- The directory that will contain all the generated build logs during the build process -->
        <!-- <DirBuildLogs Condition=" '$(DirBuildLogs)' == '' ">$(DirBuild)\logs</DirBuildLogs> -->
        
        <!-- The directory that will contain the reports generated by OpenCover and ReportGenerator describing the coverage of the unit tests. -->
        <!-- <DirReportGeneratorOutput Condition=" '$(DirReportGeneratorOutput)' == '' ">$(DirBuildLogs)\coverage</DirReportGeneratorOutput> -->
        
        <!-- The directory that will contain all the temporary files needed during the build process -->
        <!-- <DirBuildTemp Condition=" '$(DirBuildTemp)' == '' ">$(DirBuild)\temp</DirBuildTemp> -->
        
        <!-- The directory that contains all the NuGet packages for the project -->
        <!-- <DirPackages Condition=" '$(DirPackages)' == '' ">$(DirWorkspace)\packages</DirPackages> -->
        
        <!-- The directory that contains the source files for the project -->
        <!-- <DirSrc Condition=" '$(DirSrc)' == '' ">$(DirWorkspace)\src</DirSrc> -->
        
        <!-- The directory that contains the template files for the project -->
        <!-- <DirTemplates Condition=" '$(DirTemplates)' == '' ">$(DirWorkspace)\templates</DirTemplates> -->
        
        <!-- The directory that contains the report files generated by MoMA -->
        <!-- <DirReportMoma Condition=" '$(DirReportMoma)' == '' ">$(DirBuildLogs)\moma</DirReportMoma> -->
    </PropertyGroup>
    
    
    <!-- 
        **** BUILD STEPS ****
    -->
    <!--
        Define the steps taken during the build process. Available steps and their sub-steps are provided by the following properties:
        $(BuildTargetPrepare)               - Performs preparation of workspace: deleting existing files, restoring nuget packages, generating version number files and release notes.
            $(BuildStepsPrepareRestoreNuGet)       - Restores the NuGet packages for the project.
            $(BuildStepsPrepareReleaseNotes)       - Gathers the release notes and stores them for later use during the build process
            $(BuildStepsPrepareVcsInfo)            - Stores the Version Control System (VCS) information in a file for later use.
            $(BuildStepsPrepareGenerateFiles)      - Generates one or more files from a set of template files.
        $(BuildTargetAnalyzeSource)         - Performs static analysis of the source files through CCM and SourceMonitor.
            $(BuildStepsAnalyzeSourceCcm)          - Analyzes the source code files with CCM
            $(BuildStepsAnalyzeSourceSouceMonitor) - Analyzes the source code files with SourceMonitor
        $(BuildTargetBuildBinaries)         - Builds the binaries from a given Visual Studio solution.
        $(BuildTargetExecuteUnitTests)      - Executes the unit tests with either NUnit or MsTest while calculating unit test coverage with OpenCover.
            $(BuildStepsUnitTestNUnit)             - Executes the unit tests with NUnit
            $(BuildStepsUnitTestMsTest)            - Executes the unit tests with MsTest
        $(BuildTargetAnalyzeBinaries)       - Performs static analysis of the binary files through Moma and FxCop.
            $(BuildStepsAnalyzeBinariesMoma)       - Analyzes the binary files with Moma (Mono Migration Analyzer)
            $(BuildStepsAnalyzeBinariesFxCop)      - Analyzes the binary files with FxCop
        $(BuildTargetBuildApiDocumentation) - Builds the API documentation with SandCastle from the inline XML documentation comments.
        $(BuildTargetPackage)               - Packages the binaries with NuGet and via ZIP files
            $(BuildStepsPackNuGet)                 - Generates the NuGet packages
            $(BuildStepsPackZip)                   - Generates one or more ZIP archives
        
        The order in which items are defined is irrelevant given that the build script will sort the steps in the right order.
    -->
    <ItemGroup>
        <BuildStepsToExecute Include="$(BuildTargetPrepare)">
            <Steps>$(BuildStepsPrepareRestoreNuGet);$(BuildStepsPrepareReleaseNotes);$(BuildStepsPrepareVcsInfo)</Steps>
            <PreInvokeScripts></PreInvokeScripts>
            <PostInvokeScripts></PostInvokeScripts>
        </BuildStepsToExecute>
        <BuildStepsToExecute Include="$(BuildTargetBuildBinaries)">
            <PreInvokeScripts></PreInvokeScripts>
            <PostInvokeScripts></PostInvokeScripts>
        </BuildStepsToExecute>
        <BuildStepsToExecute Include="$(BuildTargetExecuteUnitTests)">
            <Steps>$(BuildStepsUnitTestNUnit)</Steps>
            <PreInvokeScripts></PreInvokeScripts>
            <PostInvokeScripts></PostInvokeScripts>
        </BuildStepsToExecute>
        <BuildStepsToExecute Include="$(BuildTargetPackage)">
            <Steps>$(BuildStepsPackNuGet);$(BuildStepsPackZip)</Steps>
            <PreInvokeScripts></PreInvokeScripts>
            <PostInvokeScripts></PostInvokeScripts>
        </BuildStepsToExecute>
    </ItemGroup>
    
    
    <!-- 
        **** PREPARE - VERSIONING ****
    -->
    <PropertyGroup>
        <!-- The full path to the file that contains the current version of the project in MsBuild format. -->
        <!-- <FileVersionMsBuild Condition=" '$(FileVersionMsBuild)' == '' ">$(DirWorkspace)\version.xml</FileVersionMsBuild> -->
        
        <!-- The full path to the file that is used to store the version information during the build -->
        <!-- <FileSemanticVersion Condition=" '$(FileSemanticVersion)' == '' ">$(DirBuildTemp)\semantic_version.json</FileSemanticVersion> -->
    </PropertyGroup>
    
    
    <!-- 
        **** PREPARE - RELEASE NOTES ****
    -->
    <PropertyGroup>
        <!-- The full path to the file that is used to store the release notes for the current release during the build. -->
        <!-- <FileReleaseNotesShort Condition=" '$(FileReleaseNotesShort)' == '' ">$(DirBuildTemp)\releasenotes_short.md</FileReleaseNotesShort> -->
        
        <!-- The full path to the file that is used to store the release notes for all the releases during the build. -->
        <!-- <FileReleaseNotesFull Condition=" '$(FileReleaseNotesFull)' == '' ">$(DirBuildTemp)\releasenotes_full.md</FileReleaseNotesFull> -->
        
        <!-- 
            The following properties have to be defined on via an environment variable (either local to the process that
            executes the build, or global to the user):
            - Always
              GitHubToken - The user token that provides access to GitHub
              
            - When using YouTrack
              IssueTrackerPassword - The password for the issue tracker user
              
              
            The following properties can be defined on the command line or via the current script:
            - Always
              GitHubUserName - The user name of the user who owns the GitHub repository
              
            - When using YouTrack
              IssueTrackerUserName - The user name for YouTrack
              YouTrackServer - The URL of the YouTrack server, e.g. http://myuser.myjetbrains.com/youtrack
        -->
        
        <!-- The project ID that is used to identify the product in the issue tracker -->
        <!-- <IssueTrackerProjectId Condition=" '$(IssueTrackerProjectId)' == '' ">UNDEFINED</IssueTrackerProjectId> -->
        
        <!-- The filter for getting issues from YouTrack -->
        <!-- <IssueFilter Condition=" '$(IssueFilter)' == '' ">UNDEFINED</IssueFilter> -->
    </PropertyGroup>
    
    
    <!-- 
        **** PREPARE - VCS INFO ****
    -->
    <PropertyGroup>
        <!-- The full path to the file that contains the information about the current VCS workspace. -->
        <!-- <FileVcsInfo Condition=" '$(FileVcsInfo)' == '' ">$(DirBuildTemp)\vcs.info.json</FileVcsInfo> -->
    </PropertyGroup>
    
    
    <!-- 
        **** PREPARE - GENERATE FILES ****
    -->
    <!-- List of all files that should be generated and their template files -->
    <ItemGroup>
        <!--
        <FilesToGenerate Include="$(DirBuildTemp)\AssemblyInfo.InternalsVisibleTo.cs">
            <Template>$(DirTemplates)\AssemblyInfo.InternalsVisibleTo.cs.in</Template>
        </FilesToGenerate> -->
    </ItemGroup>
    
    <!-- 
        Additional items that should be available for the template replacement.
        The default templates, as indicated at the top of this file, are always available.
    -->
    <ItemGroup>
        <!--
        <TemplateGenerationTokens Include="">
            <ReplacementValue></ReplacementValue>
        </TemplateGenerationTokens>
        -->
    </ItemGroup>
    
    
    <!-- 
        **** SOURCE ANALYSIS - CCM ****
    -->
    <PropertyGroup>
        <!-- The full path to the template file that is used to provide the project information for CCM. -->
        <!-- <FileTemplateCcm Condition=" '$(FileTemplateCcm)' == '' ">$(DirTemplates)\ccm.xml.in</FileTemplateCcm> -->
        
        <!-- The full path to the report file generated by CCM. Allows build templates. Allows build templates. -->
        <!-- <FileReportCcm Condition=" '$(FileReportCcm)' == '' ">$(DirBuildLogs)\ccm.xml</FileReportCcm> -->
    </PropertyGroup>
    
    
    <!-- 
        **** SOURCE ANALYSIS - SOURCEMONITOR ****
    -->
    <PropertyGroup>
        <!-- The full path to the template file that is used to provide the project information for SourceMonitor -->
        <!-- <FileTemplateSourceMonitor Condition=" '$(FileTemplateSourceMonitor)' == '' ">$(DirTemplates)\sourcemonitor.xml.in</FileTemplateSourceMonitor> -->
        
        <!-- The full path to the report file generated by SourceMonitor. Allows build templates. Allows build templates. -->
        <!-- <FileReportSourceMonitor Condition=" '$(FileReportSourceMonitor)' == '' ">$(DirBuildLogs)\sourcemonitor.xml</FileReportSourceMonitor> -->
    </PropertyGroup>
    

    <!-- 
        **** VISUAL STUDIO BUILD ****
    -->
    <PropertyGroup>
        <!-- The solution file -->
        <FileSln Condition=" '$(FileSln)' == '' ">$(DirSrc)\BuildTester.sln</FileSln>

        <!-- A flag that indicates whether an AssemblyInfo file with the version numbers should be generated -->
        <ShouldGenerateAssemblyVersionInfo>true</ShouldGenerateAssemblyVersionInfo>
        
        <!-- 
            A flag that indicates whether an AssemblyInfo file with the build information should be generated.
            Build information includes:
            - Copyright
            - Build configuration (e.g. Debug)
            - Build date and time
            - Build number and VCS revision number
        -->
        <ShouldGenerateAssemblyBuildInfo>true</ShouldGenerateAssemblyBuildInfo>
        
        <!-- 
            A flag that indicates whether the current project is a Test project. 
            This value is used here just so that there is a value when no other value is specified. Do not comment this
            value out unless you know what you are doing!
        -->
        <IsTest Condition=" '$(IsTest)' == '' ">false</IsTest>
    </PropertyGroup>
    
    <!-- Build configuration -->
    <PropertyGroup>
        <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
        <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    </PropertyGroup>
    
    <!-- Execute code analysis after the build -->
    <PropertyGroup>
        <ShouldPerformCodeAnalysis Condition=" '$(ShouldPerformCodeAnalysis)' == '' ">true</ShouldPerformCodeAnalysis>
        <CodeAnalysisRuleSet Condition="$(ShouldPerformCodeAnalysis) AND !$(IsTest)">$(SolutionDir)\codeanalysis.base.ruleset</CodeAnalysisRuleSet>
        <CodeAnalysisRuleSet Condition="$(ShouldPerformCodeAnalysis) AND $(IsTest)">$(SolutionDir)\codeanalysis.test.ruleset</CodeAnalysisRuleSet>
        <CodeAnalysisCulture Condition="$(ShouldPerformCodeAnalysis)">en-US</CodeAnalysisCulture>
    </PropertyGroup>
    
    <!-- Generate the XML documentation file -->
    <PropertyGroup>
        <GenerateDocumentation>true</GenerateDocumentation>
        <DocumentationFile Condition="$(GenerateDocumentation) AND !$(IsTest)">$(OutputPath)\$(AssemblyName).XML</DocumentationFile>
    </PropertyGroup>
    
    <!-- Strong name the binaries -->
    <PropertyGroup>
        <ShouldSign Condition=" '$(ShouldSign)' == '' ">true</ShouldSign>
        <SignAssembly Condition="$(ShouldSign)">true</SignAssembly>
        <DelaySign Condition="$(ShouldSign)">false</DelaySign>
        <AssemblyOriginatorKeyFile Condition="$(ShouldSign)">$(SOFTWARE_SIGNING_KEY_PATH)</AssemblyOriginatorKeyFile>
    </PropertyGroup>
    
    <!-- Debug settings -->
    <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
        <DebugSymbols>true</DebugSymbols>
        <DebugType>full</DebugType>
        <Optimize>false</Optimize>
        <RunCodeAnalysis>$(ShouldDoCodeAnalysis)</RunCodeAnalysis>
    </PropertyGroup>
    
    <!-- Release settings -->
    <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
        <DebugSymbols>false</DebugSymbols>
        <DebugType>pdbonly</DebugType>
        <Optimize>true</Optimize>
        <RunCodeAnalysis>$(ShouldDoCodeAnalysis)</RunCodeAnalysis>
    </PropertyGroup>
    
    <!-- C# specific configuration -->
    <PropertyGroup>
        <CSharpWarningLevel>4</CSharpWarningLevel>
    </PropertyGroup>
    
    <!-- The collection of assemblies that should be provided in the InternalsVisibleTo attributes -->
    <ItemGroup>
        <InternalsVisibleTo Include="Test.Unit.Console">
            <Projects>BuildTester.Console</Projects>
            <KeyFile>$(SOFTWARE_SIGNING_KEY_PATH)</KeyFile>
        </InternalsVisibleTo>
        <InternalsVisibleTo Include="Moq">
            <Projects>BuildTester.Console</Projects>
            <AssemblyFromPackage>moq.dll</AssemblyFromPackage>
        </InternalsVisibleTo>
        <InternalsVisibleTo Include="DynamicProxyGenAssembly2">
            <Projects>BuildTester.Console</Projects>
            <PublicKey>0024000004800000940000000602000000240000525341310004000001000100c547cac37abd99c8db225ef2f6c8a3602f3b3606cc9891605d02baa56104f4cfc0734aa39b93bf7852f7d9266654753cc297e7d2edfe0bac1cdcf9f717241550e0a7b191195b7667bb4f64bcb8e2121380fd1d9d46ad2d92d2d15605093924cceaf74c4861eff62abf69b9291ed0a340e113be11e6a7d3113e92484cf7045cc7</PublicKey>
        </InternalsVisibleTo>
    </ItemGroup>
    
    <!-- 
        Additional scripts that need to be executed prior to the start of the Visual Studio clean process and the 
        start of the Visual Studio build process. The following properties are passed to each script:
        
        - Configuration
        - Platform
        - Full path to the settings property file (i.e. the current file)
    -->
    <ItemGroup>
        <!--
        <PreCleanScripts Include="" />
        <PreCompilationScripts Include="" />
        -->
    </ItemGroup>
    
    
    <!-- 
        **** UNIT TESTS ****
    -->
    <PropertyGroup>
        <!-- The assembly name prefix for the assemblies containing the unit tests. Allows build templates. -->
        <!-- <UnitTestAssemblyNamePrefix Condition=" '$(UnitTestAssemblyNamePrefix)' == '' " >Test.Unit</UnitTestAssemblyNamePrefix> -->
        
        <!-- The MsTest report file. Allows build templates. -->
        <!-- <FileReportMsTest Condition=" '$(FileReportMsTest)' == '' ">$(DirBuildLogs)\mstest.trx</FileReportMsTest> -->

        <!-- The XML report file that is generated by OpenCover upon completion of the unit test execution. Allows build templates. -->
        <!-- <FileReportOpenCoverXml Condition=" '$(FileReportOpenCoverXml)' == '' ">$(DirBuildLogs)\opencover.xml</FileReportOpenCoverXml> -->
        
        <!-- The CSV report file that is generated by OpenCover upon completion of the unit test execution. Allows build templates. -->
        <!-- <FileReportOpenCoverCsv Condition=" '$(FileReportOpenCoverCsv)' == '' ">$(DirBuildLogs)\coverage.csv</FileReportOpenCoverCsv> -->
    </PropertyGroup>
    <ItemGroup>
        <!-- The files that contain the unit test cases. Allows build templates. -->
        <!-- <UnitTestAssemblies Include="$(DirBuildBinPlatformConfig)\**\$(UnitTestAssemblyNamePrefix)*.dll" /> -->
        
        <!-- Defines the attributes that indicate code that should be ignored by OpenCover -->
        <!-- 
        <OpenCoverIgnoreAttributes Include="System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute" />
        <OpenCoverIgnoreAttributes Include="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
        -->
        
        <!-- Defines the filters used by OpenCover. -->
        <!-- NOTE: Use the hexadecimal value for * (%2A) to avoid MsBuild trying to make sense out of the text -->
        <OpenCoverFilters Include="+[$(ProductName)]%2A" />
        <OpenCoverFilters Include="+[$(ProductName).%2A]%2A" />
        <OpenCoverFilters Include="-[%2A$(UnitTestAssemblyNamePrefix)%2A]%2A" />
        <OpenCoverFilters Include="-[NUnit]%2A" />
        <OpenCoverFilters Include="-[NUnit.%2A]%2A" />
    </ItemGroup>
    
    
    <!-- 
        **** BINARY ANALYSIS - MOMA ****
    -->
    <PropertyGroup>
        <!-- The HTML report that is generated by MoMA. Allows build templates. -->
        <!-- <FileReportMoma Condition=" '$(FileReportMoma)' == '' ">$(DirReportMoma)\moma.html</FileReportMoma> -->
    </PropertyGroup>
    <ItemGroup>
        <!-- The locations of the files that should be analyzed by MoMA (Mono Migration Analyzer).  -->
        <!--
        <MomaInputFiles Include="$(DirBuildBinPlatformConfig)\*.dll"
                        Exclude="$(DirBuildBinPlatformConfig)\Test.*.dll" />
        <MomaInputFiles Include="$(DirBuildBinPlatformConfig)\*.exe"/>
        -->
    </ItemGroup>
    
    
    <!-- 
        **** BINARY ANALYSIS - FXCOP ****
    -->
    <PropertyGroup>
        <!-- The full path to the FxCop project file. -->
        <!-- <FileProjectFxCop Condition=" '$(FileProjectFxCop)' == '' ">UNDEFINED</FileProjectFxCop> -->
        
        <!-- The full path to the FxCop output report. Allows build templates. -->
        <!-- <FileReportFxCop Condition=" '$(FileReportFxCop)' == '' ">$(DirBuildLogs)\fxcop.xml</FileReportFxCop> -->
    </PropertyGroup>
    
    
    <!-- 
        **** BUILD API DOCUMENATION - SANDCASTLE ****
    -->
    <PropertyGroup>
        <!-- The full path to the template file that is used to provide the project information for sandcastle -->
        <!-- <FileTemplateSandcastle Condition=" '$(FileTemplateSandcastle)' == '' ">$(DirTemplates)\sandcastle.shfbproj.in</FileTemplateSandcastle> -->
    </PropertyGroup>
    
    
    <!-- 
        **** PACK - NUGET ****
    -->
    <!-- 
        The item group defining the location and contents of the NuGet packages that are generated during the build 
        
        The IncludedDependencies and the ExcludedDependencies are actually lists of packages.config files that
        should be included (or excluded) in the list of dependencies. Each entry is separated by a semi-colon(;).
        
        Allows build templates.
    -->
    <ItemGroup>
        <NuGetPackageSpecs Include="$(DirBuildTemp)\nuget.nuspec">
            <Template>$(DirTemplates)\nuget.nuspec.in</Template>
            <ShouldBuildSymbols>true</ShouldBuildSymbols>
            <IncludedDependencies>$(DirSrc)\**\packages.config</IncludedDependencies>
            <ExcludedDependencies>$(DirSrc)\test.*\packages.config;$(DirSrc)\solutionlevel\packages.config;$(DirSrc)\.nuget\packages.config</ExcludedDependencies>
        </NuGetPackageSpecs>
    </ItemGroup>
    
    
    <!-- 
        **** PACK - ZIP ARCHIVE ****
    -->
    <!-- 
        The item group defining the location and contents of the archive files that are generated during the build 
        
        The IncludedFiles and the ExcludedFiles are actually lists of packages.config files that
        should be included (or excluded) in the list of dependencies. Each entry is separated by a semi-colon(;).
        
        Allows build templates.
    -->
    <ItemGroup>
        <ArchivePackageSpecs Include="$(DirBuildDeploy)\BuildTester-${VersionSemantic}.zip">
            <DirBase>$(DirBuildBin)</DirBase>
            <IncludedFiles>$(DirBuildBin)\**\*.dll;$(DirBuildBin)\**\*.exe;$(DirBuildBin)\**\*.exe.config</IncludedFiles>
            <ExcludedFiles>$(DirBuildBin)\**\Test.*.dll;$(DirBuildBin)\**\SolutionLevel.dll</ExcludedFiles>
        </ArchivePackageSpecs>
    </ItemGroup>
    
    
    
    
    
    <!--
        *************************************
        *                                   *
        *     DEPLOYMENT SETTINGS           *
        *                                   *
        *************************************
    -->
    
    <!-- 
        **** DEPLOY - GENERAL ****
    -->
    <PropertyGroup>
        <!-- 
            The following properties have to be defined on via an environment variable (either local to the process that
            executes the build, or global to the user):
            - When pushing packages via NuGet
              NuGetApiKey - The NuGet API key for the NuGet feed
        -->
        
        <!-- The URL to which all NuGet packages should be pushed. By default it pushes to nuget.org -->
        <!-- <NuGetSourceUrl Condition=" '$(NuGetSourceUrl)' == '' "></NuGetSourceUrl> -->
        
        <!-- The URL / UNC path to which all the symbol packages should be pushed. -->
        <!-- <SymbolServerUrl Condition=" '$(SymbolServerUrl)' == '' "></SymbolServerUrl> -->
    </PropertyGroup>
    
    
    <!-- 
        **** DEPLOY STEPS ****
    -->
    <!--
        Define the steps taken during the deploy process. Available steps and their sub-steps are provided by the following properties:
        $(DeployTargetTag)    - Adds one or more tags to the VCS
        $(DeployTargetPushTo) - Pushes the artifacts to one or more locations
            $(DeployStepsPushToNuget)         - Pushes one or more artifacts to a NuGet feed
            $(DeployStepsPushToDirectory)     - Pushes one or more artifacts to a directory
            $(DeployStepsPushToSymbolServer)  - Pushes one or more NuGet symbol packages to a local symbol server on a UNC path
            $(DeployStepsPushToGitHubRelease) - Pushes zero or more files to a GitHub release
        
        The order in which items are defined is irrelevant given that the build script will sort the steps in the right order.
    -->
    <ItemGroup>
        <DeployStepsToExecute Include="$(DeployTargetTag)">
            <PreInvokeScripts></PreInvokeScripts>
            <PostInvokeScripts></PostInvokeScripts>
        </DeployStepsToExecute>
        <DeployStepsToExecute Include="$(DeployTargetPushTo)">
            <Steps>$(DeployStepsPushToGitHubRelease)</Steps>
            <PreInvokeScripts></PreInvokeScripts>
            <PostInvokeScripts></PostInvokeScripts>
        </DeployStepsToExecute>
    </ItemGroup>
    
    
    <!-- 
        **** PUSHTO - DIRECTORY / FILESERVER ****
    -->
    <!-- 
        The item group defining the files that should be pushed to a given deployment directory. 
        
        The IncludedFiles and the ExcludedFiles are actually lists of files that
        should be included (or excluded) in the list of files to deploy. Each entry is separated by a semi-colon(;).
        
        The PushToDirectorySpecs, IncludedFiles and ExcludedFiles all allow the insertion of build templates.
    -->
    <ItemGroup>
        <!--
        <PushToDirectorySpecs Include="\\MyServer\${ProductName}\${VersionSemantic}">
            <IncludedFiles>$(DirSrc)\Nuclei.Fusion\packages.config</IncludedFiles>
            <ExcludedFiles></ExcludedFiles>
        </PushToDirectorySpecs>
        -->
    </ItemGroup>
    
    
    <!-- 
        **** PUSHTO - NUGET ****
    -->
    <!-- 
        The item group defining which packages should be pushed up to the NuGet package source.
        Allows build templates.
    -->
    <ItemGroup>
        <NuGetPackagesToPush Include="$(DirBuildDeploy)\*.nupkg"
                             Exclude="$(DirBuildDeploy)\*.symbols.nupkg" />
    </ItemGroup>
    
    
    <!-- 
        **** PUSHTO - SYMBOL SERVER ****
    -->
    <!-- 
        The item group defining which symbol packages should be pushed up to the symbol server.
        Allows build templates.
    -->
    <ItemGroup>
        <!-- <SymbolPackagesToPush Include="$(DirBuildDeploy)\*.symbols.nupkg" /> -->
    </ItemGroup>
    
    
    <!-- 
        **** PUSHTO - GITHUB RELEASE ****
    -->
    <!-- 
        The item group defining the files that should be pushed to a GitHub release
    -->
    <ItemGroup>
        <PushToGitHubReleaseSpecs Include="${VersionSemantic}">
             <Repository>BuildTester</Repository>
             <Description>${ReleaseNotesShort}</Description>
             <IncludedFiles>$(DirBuildDeploy)\BuildTester-${VersionSemantic}.zip</IncludedFiles>
             <ExcludedFiles></ExcludedFiles>
        </PushToGitHubReleaseSpecs>
    </ItemGroup>
    
    
    
    
    
    <!--
        *************************************
        *                                   *
        *     SHARED TOOLS                  *
        *                                   *
        *************************************
    -->
    
    <!-- Overrides for the tools paths -->    
    <PropertyGroup>
        <!-- The full path to the GIT command line executable. Normally expected to be found via the PATH environment variable. -->
        <!-- <ToolsExternalGitPath Condition=" '$(ToolsExternalGitPath)' == '' ">git.exe</ToolsExternalGitPath> -->
        
        <!-- The full path to the TFS command line executable. Normally expected to be found via the PATH environment variable. -->
        <!-- <ToolsExternalTfsPath Condition=" '$(ToolsExternalTfsPath)' == '' ">tf.exe</ToolsExternalTfsPath> -->
        
        <!-- The full path to the NuGet command line executable. Normally expected to be found via the PATH environment variable. -->
        <!-- <ToolsExternalNuGetExe Condition=" '$(ToolsExternalNuGetExe)' == '' ">nuget.exe</ToolsExternalNuGetExe> -->
        
        <!-- The full path to the MsTest command line executable. -->
        <!-- <ToolsExternalMsTestPath Condition=" '$(ToolsExternalMsTestPath)' == '' ">C:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\IDE\MsTest.exe</ToolsExternalMsTestPath> -->
        
        <!-- The full path to the directory that contains the FxCop command line executable -->
        <!-- <ToolsExternalFxCopDir Condition=" '$(ToolsExternalFxCopDir)' == '' "></ToolsExternalFxCopDir> -->
        
        <!-- The full path to the github-release command line executable. -->
        <!-- <ToolsExternalGitHubRelease Condition=" '$(ToolsExternalGitHubRelease)' == '' ">github-release.exe</ToolsExternalGitHubRelease> -->
    </PropertyGroup>

    
    


    <!--
        *************************************
        *                                   *
        *     BUILD SPECIFIC SETTINGS       *
        *                                   *
        *************************************
    -->
    
    <!-- Build specific settings -->
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsSettings>true</ExistsSettings>
    </PropertyGroup>
</Project>
